import { apiSlice } from "./apiSlice";
import { STUDENT_URL } from "../constants"; // Ensure this is correct for your environment

export const studentApiSlice = apiSlice.injectEndpoints({
  endpoints: (builder) => ({
    // Fetch all students
    getStudents: builder.query({
      query: () => ({
        url: `${STUDENT_URL}`,
        method: "GET",
      }),
    }),

    // Add a new student
    addStudent: builder.mutation({
      query: (studentData) => ({
        url: `${STUDENT_URL}`,
        method: "POST",
        body: studentData,
      }),
    }),

    // Update student data
    updateStudent: builder.mutation({
      query: ({ id, studentData }) => ({
        url: `${STUDENT_URL}/${id}`,
        method: "PUT",
        body: studentData,
      }),
    }),

    // Delete a student
    deleteStudent: builder.mutation({
      query: (id) => ({
        url: `${STUDENT_URL}/${id}`,
        method: "DELETE",
      }),
    }),

    // save engagement result
    saveEngagementResult: builder.mutation({
      query: ({
        rollNo,
        finalEngagementStatus,
        engagementCategory,
        engagementPercentage,
      }) => {
        const payload = {
          rollNo,
          finalEngagementStatus,
          engagementCategory,
          engagementPercentage,
        };

        return {
          url: `${STUDENT_URL}/engagement`,
          method: "POST",
          body: payload,
        };
      },
    }),

    // Display engagement result with filters
    // Display engagement result with filters
    displayEngagementResult: builder.query({
      query: (filters) => {
        // Extract filters
        const { department, section, session, teacher } = filters;

        // Create an array to hold query parameters
        const queryParams = [];

        // Add query parameters only if they exist
        if (department)
          queryParams.push(`department=${encodeURIComponent(department)}`);
        if (section) queryParams.push(`section=${encodeURIComponent(section)}`);
        if (session) queryParams.push(`session=${encodeURIComponent(session)}`);
        if (teacher) queryParams.push(`teacher=${encodeURIComponent(teacher)}`);

        // Join the parameters with '&'
        const queryString =
          queryParams.length > 0 ? `?${queryParams.join("&")}` : "";

        // Return the request configuration
        return {
          url: `${STUDENT_URL}/engagement-results${queryString}`,
          method: "GET",
        };
      },
    }),
  }),
});

// Export hooks generated by the slice
export const {
  useGetStudentsQuery,
  useAddStudentMutation,
  useUpdateStudentMutation,
  useDeleteStudentMutation,
  useSaveEngagementResultMutation,
  useDisplayEngagementResultQuery,
} = studentApiSlice;
